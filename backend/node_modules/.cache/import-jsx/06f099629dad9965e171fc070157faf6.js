"use strict";

const React = require("react"),
      {
  useApp,
  Static,
  Box,
  Text,
  Newline
} = require("ink"),
      SelectInput = require("ink-select-input").default,
      Spinner = require("ink-spinner").default,
      open = require("open"),
      uuid = require("uuid").v4,
      EventSource = require("eventsource"),
      fetch = require("node-fetch"),
      config = require("../config").global,
      ItemComponent = ({
  isSelected: b = !1,
  label: a
}) => /*#__PURE__*/React.createElement(Text, {
  color: b ? "cyan" : void 0
}, a),
      Loading = ({
  status: a,
  showSpinner: b = !0
  /* enable colors */

  /* enable colors */

  /* enable colors */

  /* enable colors */

}) => /*#__PURE__*/React.createElement(Text, null, b ? /*#__PURE__*/React.createElement(Text, {
  color: "green"
}, /*#__PURE__*/React.createElement(Spinner, {
  type: "dots"
})) : null, b ? ` ${a}` : `${a}`),
      fronti_url = `${process.env.ADMIN_URL || "https://auth.codehooks.io"}`,
      fronti_api_url = `${process.env.ADMIN_API_URL || "https://admin.codehooks.io"}`,
      items = [{
  label: "Use Github",
  value: "github",
  url: `${fronti_url}/authenticate/github`
}, {
  label: "Use Google",
  value: "google",
  url: `${fronti_url}/authenticate/google`
}, {
  label: "Exit",
  value: "exit"
}],
      authStatus = {
  INITIAL: 0,
  WAITING: 1,
  SUCCESS: 2,
  FAILED: 3,
  TIMEOUT: 4
},
      Menu = ({
  provider: a
}) => {
  const [b, c] = React.useState(authStatus.INITIAL),
        [d, e] = React.useState(null),
        [f, g] = React.useState([]),
        [h, i] = React.useState(""),
        [j, k] = React.useState(null),
        {
    exit: l
  } = useApp();
  React.useEffect(() => {
    if (j && j.url) {
      const a = uuid(),
            b = `${j.url}/${a}`;
      c(authStatus.WAITING), g([`If browser does not open automatically, please paste in this URL in a new browser tab/window: ${b}`, ...f]), i(`Authenticating with ${j.value}`);

      (async () => {
        open(b);

        try {
          const b = new EventSource(`${fronti_api_url}/cli_auth/${a}`);

          b.onmessage = a => {
            try {
              const b = JSON.parse(a.data); // store token in configstore

              config.set("token", b.token), c(authStatus.SUCCESS);
            } catch (a) {
              c(authStatus.FAILED), i(`Authenticating with ${j.value} failed. Please try again.`);
            }
          };
        } catch (a) {
          c(authStatus.FAILED), i(`Authenticating with ${j.value} failed. Please try again.`);
        }
      })();
    }
  }, [j]), React.useEffect(() => {
    if (b === authStatus.SUCCESS) {
      (async () => {
        const a = {
          method: "post",
          body: JSON.stringify({
            query: "{ currentUser {id name termsAccepted} }",
            variables: {}
          }),
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${config.get("token")}`
          },
          redirect: "follow"
        };

        try {
          const b = await fetch(`${fronti_api_url}/graphql`, a);

          if (200 === b.status) {
            const a = await b.json();
            e(a && a.data && a.data.currentUser || {
              name: "thanks"
            });
          } else ;
        } catch (a) {//console.error(err);
        }
      })();
    }
  }, [b]);

  const m = a => a && "exit" === a.value ? l() : void k(a);

  if (b === authStatus.INITIAL && a) {
    c(authStatus.WAITING);
    const b = items && items.find(b => b.value === a && b.url);
    b ? m(b) : (console.log("Unknown authentication provider"), l());
  }

  return d && b === authStatus.SUCCESS ? (setTimeout(() => {
    process.exit();
  }, 300), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    marginTop: 1
  }, /*#__PURE__*/React.createElement(Text, null, `👏 Authentication complete, ${d.name}!`, " "), /*#__PURE__*/React.createElement(Text, null, "You are now ready to use the Codehooks CLI. Please close the browser window. "), !d.termsAccepted && /*#__PURE__*/React.createElement(Box, {
    marginTop: 1
  }, /*#__PURE__*/React.createElement(Text, null, "\uD83D\uDCDD Remember to use the command 'coho account' to accept our terms first!")))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Static, {
    items: f
  }, (a, b) => /*#__PURE__*/React.createElement(Box, {
    key: b
  }, /*#__PURE__*/React.createElement(Text, null, a))), /*#__PURE__*/React.createElement(Newline, null), b === authStatus.WAITING ? /*#__PURE__*/React.createElement(Loading, {
    status: h
  }) : null, b !== authStatus.INITIAL || a ? null : /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, {
    marginBottom: 1
  }, /*#__PURE__*/React.createElement(Text, null, "Select option below")), /*#__PURE__*/React.createElement(SelectInput, {
    itemComponent: ItemComponent,
    items: items,
    onSelect: m
  })), b === authStatus.TIMEOUT ? /*#__PURE__*/React.createElement(Loading, {
    status: h,
    showSpinner: !1
  }) : null);
};

module.exports = Menu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,